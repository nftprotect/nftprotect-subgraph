
# NFT Protect schema

type System @entity
{
    id: ID!
    arbitratorregistry: Bytes
    nftprotect: Bytes
    userregistry: Bytes
    sigatureVerifier: Bytes
    feeEntry: BigInt
    feeOpenCase: BigInt
    feeFetchRuling: BigInt
    burnOnAction: Boolean
    allowThirdPartyTransfers: Boolean
    base: String
    affiliatePercent: Int
}

type Arbitrator @entity
{
    id: ID!
    name: String!
    address: Bytes!
    extraData: Bytes!
}

type Partner @entity
{
    id: ID!
    discount: Int!
    affiliatePercent: Int!
    totalProtected: BigInt!
}

type User @entity
{
    id: ID!
    referrer: User
    tokensProtected: [Token!] @derivedFrom(field: "ownerProtected")
    tokensOriginal: [Token!] @derivedFrom(field: "ownerOriginal")
    referrals: [User!] @derivedFrom(field: "referrer")
    totalProtected: BigInt!
    totalOwnedProtected: BigInt!
    totalReferrals: BigInt!
    totalRewards: BigInt!
}

type Token @entity
{
    id: ID!
    ownerProtected: User!
    ownerOriginal: User!
    assetType: BigInt!
    contract: Bytes!
    tokenId: BigInt
    amount: BigInt
    timestamp: BigInt!
    blocknumber: BigInt!
    latestRequest: Request
    burned: Boolean!
    nonce: BigInt!
}

enum Status
{
    InDispute,
    Accepted,
    Rejected
}

enum ReqType
{
    OwnershipAdjustment,
    OwnershipRestore,
    Burn
}

enum ReqStatus
{
    Initial,
    Accepted,
    Rejected,
    Disputed
}

enum AffiliateActionType
{
    Register,
    Payment
}

type Request @entity
{
    id: ID!
    type: ReqType!
    status: ReqStatus!
    token: Token!
    oldowner: User
    newowner: User
    timestamp: BigInt!
    blocknumber: BigInt!
    timestampChange: BigInt
    blocknumberChange: BigInt
}

type AffiliateAction @entity
{
    id: ID!
    referral: Bytes!
    referrer: Bytes!
    type: AffiliateActionType!
    amount: BigInt!
    timestamp: BigInt!
    blocknumber: BigInt!
    txHash: Bytes!
}

type MetaEvidence @entity {
    id: ID!
    evidenceType: Int!
    evidence: String!
}